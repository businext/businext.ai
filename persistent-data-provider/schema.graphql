""" A keystone list """
type Business {
  id: ID!
  name: String
  address: String
  lastUpdated: String
  businessInferences: String
}

input BusinessWhereInput {
  AND: [BusinessWhereInput]
  OR: [BusinessWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  address: String
  address_not: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  address_i: String
  address_not_i: String
  address_contains_i: String
  address_not_contains_i: String
  address_starts_with_i: String
  address_not_starts_with_i: String
  address_ends_with_i: String
  address_not_ends_with_i: String
  address_in: [String]
  address_not_in: [String]
  lastUpdated: String
  lastUpdated_not: String
  lastUpdated_lt: String
  lastUpdated_lte: String
  lastUpdated_gt: String
  lastUpdated_gte: String
  lastUpdated_in: [String]
  lastUpdated_not_in: [String]
  businessInferences: String
  businessInferences_not: String
  businessInferences_contains: String
  businessInferences_not_contains: String
  businessInferences_starts_with: String
  businessInferences_not_starts_with: String
  businessInferences_ends_with: String
  businessInferences_not_ends_with: String
  businessInferences_i: String
  businessInferences_not_i: String
  businessInferences_contains_i: String
  businessInferences_not_contains_i: String
  businessInferences_starts_with_i: String
  businessInferences_not_starts_with_i: String
  businessInferences_ends_with_i: String
  businessInferences_not_ends_with_i: String
  businessInferences_in: [String]
  businessInferences_not_in: [String]
}

input BusinessWhereUniqueInput {
  id: ID!
}

enum SortBusinessesBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  address_ASC
  address_DESC
  lastUpdated_ASC
  lastUpdated_DESC
  businessInferences_ASC
  businessInferences_DESC
}

input BusinessUpdateInput {
  name: String
  address: String
  lastUpdated: String
  businessInferences: String
}

input BusinessesUpdateInput {
  id: ID!
  data: BusinessUpdateInput
}

input BusinessCreateInput {
  name: String
  address: String
  lastUpdated: String
  businessInferences: String
}

input BusinessesCreateInput {
  data: BusinessCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type _ListAccess {
  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'create' operations.
  NOTE: 'create' can only return a Boolean.
  It is not possible to specify a declarative Where clause for this
  operation
  """
  create: Boolean

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'read' operations.
  """
  read: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'update' operations.
  """
  update: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'delete' operations.
  """
  delete: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'auth' operations.
  """
  auth: JSON
}

type _ListQueries {
  """Single-item query name"""
  item: String

  """All-items query name"""
  list: String

  """List metadata query name"""
  meta: String
}

type _ListMutations {
  """Create mutation name"""
  create: String

  """Create many mutation name"""
  createMany: String

  """Update mutation name"""
  update: String

  """Update many mutation name"""
  updateMany: String

  """Delete mutation name"""
  delete: String

  """Delete many mutation name"""
  deleteMany: String
}

type _ListInputTypes {
  """Input type for matching multiple items"""
  whereInput: String

  """Input type for matching a unique item"""
  whereUniqueInput: String

  """Create mutation input type name"""
  createInput: String

  """Create many mutation input type name"""
  createManyInput: String

  """Update mutation name input"""
  updateInput: String

  """Update many mutation name input"""
  updateManyInput: String
}

type _ListSchemaFields {
  """The path of the field in its list"""
  path: String

  """The name of the field in its list"""
  name: String @deprecated(reason: "Use `path` instead")

  """The field type (ie, Checkbox, Text, etc)"""
  type: String
}

type _ListSchemaRelatedFields {
  """The typename as used in GraphQL queries"""
  type: String

  """A list of GraphQL field names"""
  fields: [String]
}

type _ListSchema {
  """The typename as used in GraphQL queries"""
  type: String

  """
  Top level GraphQL query names which either return this type, or
  provide aggregate information about this type
  """
  queries: _ListQueries

  """Top-level GraphQL mutation names"""
  mutations: _ListMutations

  """Top-level GraphQL input types"""
  inputTypes: _ListInputTypes

  """Information about fields defined on this list"""
  fields(where: _ListSchemaFieldsInput): [_ListSchemaFields]

  """
  Information about fields on other types which return this type, or
  provide aggregate information about this type
  """
  relatedFields: [_ListSchemaRelatedFields]
}

type _ListMeta {
  """The Keystone list key"""
  key: String

  """The Keystone List name"""
  name: String @deprecated(reason: "Use `key` instead")

  """The list's user-facing description"""
  description: String

  """The list's display name in the Admin UI"""
  label: String

  """The list's singular display name"""
  singular: String

  """The list's plural display name"""
  plural: String

  """The list's data path"""
  path: String

  """Access control configuration for the currently authenticated request"""
  access: _ListAccess

  """Information on the generated GraphQL schema"""
  schema: _ListSchema
}

type _QueryMeta {
  count: Int
}

input _ksListsMetaInput {
  key: String

  """Whether this is an auxiliary helper list"""
  auxiliary: Boolean
}

input _ListSchemaFieldsInput {
  type: String
}

type Mutation {
  """ Create a single Business item. """
  createBusiness(data: BusinessCreateInput): Business

  """ Create multiple Business items. """
  createBusinesses(data: [BusinessesCreateInput]): [Business]

  """ Update a single Business item by ID. """
  updateBusiness(id: ID!, data: BusinessUpdateInput): Business

  """ Update multiple Business items by ID. """
  updateBusinesses(data: [BusinessesUpdateInput]): [Business]

  """ Delete a single Business item by ID. """
  deleteBusiness(id: ID!): Business

  """ Delete multiple Business items by ID. """
  deleteBusinesses(ids: [ID!]): [Business]
  endSession: Boolean!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type Query {
  """ Search for all Business items which match the where clause. """
  allBusinesses(where: BusinessWhereInput, search: String, sortBy: [SortBusinessesBy!], orderBy: String, first: Int, skip: Int): [Business]

  """ Search for the Business item with the matching ID. """
  Business(where: BusinessWhereUniqueInput!): Business

  """ Perform a meta-query on all Business items which match the where clause. 
  """
  _allBusinessesMeta(where: BusinessWhereInput, search: String, sortBy: [SortBusinessesBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Business list. """
  _BusinessesMeta: _ListMeta

  """ Retrieve the meta-data for all lists. """
  _ksListsMeta(where: _ksListsMetaInput): [_ListMeta]
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
